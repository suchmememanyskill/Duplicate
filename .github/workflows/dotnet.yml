name: .NET

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: clone repo
      uses: actions/checkout@v2
        
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x

    - name: Restore dependencies
      run: dotnet restore
    
    - name: Linux build
      run: |
        cd LegendaryGUIv2
        dotnet publish -o Linux -r linux-x64 --self-contained -p:PublishSingleFile=true
        wget -O Linux/legendary https://github.com/derrod/legendary/releases/latest/download/legendary
        chmod a+x Linux/legendary
        chmod a+x Linux/Duplicate
    
    - name: Windows build
      run: |
        cd LegendaryGUIv2
        dotnet publish -o Windows -r win-x64 --self-contained -p:PublishSingleFile=true
        wget -O Windows/legendary.exe https://github.com/derrod/legendary/releases/latest/download/legendary.exe

    - name: Zip Linux Build
      uses: edgarrc/action-7z@v1
      with:
        args: 7z a Linux.7z ./LegendaryGUIv2/Linux
        
    - name: Zip Windows Build
      uses: edgarrc/action-7z@v1
      with:
        args: 7z a Windows.7z ./LegendaryGUIv2/Windows

    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: Duplicate
        path: |
          Linux.7z
          Windows.7z
          
    - name: Deploy Windows release
      uses: WebFreak001/deploy-nightly@v1.1.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # automatically provided by github actions
      with:
        upload_url: https://uploads.github.com/repos/suchmememanyskill/Duplicate/releases/61153235/assets{?name,label} # find out this value by opening https://api.github.com/repos/<owner>/<repo>/releases in your browser and copy the full "upload_url" value including the {?name,label} part
        release_id: 61153235 # same as above (id can just be taken out the upload_url, it's used to find old releases)
        asset_path: ./Windows.7z # path to archive to upload
        asset_name: windows-nightly-$$.7z # name to upload the release as, use $$ to insert date (YYYYMMDD) and 6 letter commit hash
        asset_content_type: application/7z # required by GitHub API
        max_releases: 1 # optional, if there are more releases than this matching the asset_name, the oldest ones are going to be deleted
        
    - name: Deploy Linux release
      uses: WebFreak001/deploy-nightly@v1.1.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # automatically provided by github actions
      with:
        upload_url: https://uploads.github.com/repos/suchmememanyskill/Duplicate/releases/61153235/assets{?name,label} # find out this value by opening https://api.github.com/repos/<owner>/<repo>/releases in your browser and copy the full "upload_url" value including the {?name,label} part
        release_id: 61153235 # same as above (id can just be taken out the upload_url, it's used to find old releases)
        asset_path: ./Linux.7z # path to archive to upload
        asset_name: linux-nightly-$$.7z # name to upload the release as, use $$ to insert date (YYYYMMDD) and 6 letter commit hash
        asset_content_type: application/7z # required by GitHub API
        max_releases: 1 # optional, if there are more releases than this matching the asset_name, the oldest ones are going to be deleted
